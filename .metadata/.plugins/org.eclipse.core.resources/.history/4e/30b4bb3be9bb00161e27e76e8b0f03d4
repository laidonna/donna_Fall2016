package fracCalc;

import java.util.Scanner;
import java.util.*;

public class FracCalc {

    public static void main(String[] args){
        // TODO: Read the input from the user and call produceAnswer with an equation
    	Scanner input = new Scanner(System.in);
    	System.out.println("Please input the equation you want answered.");
    	String equation = input.nextLine();
    	while(!equation.equals("quit")){
    		System.out.println(produceAnswer(equation));
    		System.out.println("Please input the equation you want answered.");
    		equation = input.nextLine();
    	}
    }
    
    public static String produceAnswer(String input){ 

        String operand1 ="";
        String operator ="";
        String operand2 ="";
        String fracSum = null;
        // String split through spaces
        String [] fracParts = input.split(" ");
        operand1 = fracParts[0];
        operator = fracParts[1];
        operand2 = fracParts[2];
        
        operand1 = operand1.trim(); 
        operator = operator.trim();
        operand2 = operand2.trim();

        int [] fracArr = parseOperand(operand1);
        int [] fracArr2 = parseOperand(operand2);
        
        int[] improperFracArr = toImproperFrac(fracArr[0], fracArr[1], fracArr[2]);
        int[] improperFracArr2 = toImproperFrac(fracArr2[0], fracArr[1], fracArr2[2]);
        int[] firstFrac = commonDenom(improperFracArr, fracArr2[2]);
    	int[] secFrac = commonDenom(improperFracArr2, fracArr[2]);
    	
        if (operator.equals("+")){
        	fracSum = simplifyFrac(toMixedNum(addFrac(firstFrac, secFrac)));
        } else if (operator.equals("*")){
        	fracSum = simplifyFrac(toMixedNum(multiplyFrac(improperFracArr, improperFracArr2)));
        } else if (operator.equals("/")){ 
        	fracSum = simplifyFrac(toMixedNum(divideFrac(improperFracArr, improperFracArr2)));
        } else if (operator.equals("-")){
        	fracSum = simplifyFrac(toMixedNum(subtractFrac(firstFrac, secFrac))); 
        } else {
        	return " Error: You must have done something wrong! Your operators are messed up.";
        }
		return fracSum;
    }
    
    // parses the operand to separate the whole number, numerator, and denominator into different parts and returns it as an array
    public static int[] parseOperand (String operand){
    	int denom;
        int numerator;
        int wholeNum;
        
        if ((operand.indexOf("/") >  0) && !(operand.indexOf("_") > 0) ){
        	numerator = Integer.parseInt(operand.substring(0, operand.indexOf("/")));
			denom = Integer.parseInt(operand.substring(operand.indexOf("/")+1));
			wholeNum = 0;
        }else if(!(operand.indexOf("_") > 0) && (!(operand.indexOf("/")> 0))){
    		wholeNum = Integer.parseInt(operand);
    		numerator = 0;
    		denom = 1;
    	}else if(!(operand.indexOf("/") > 0)){
    		wholeNum = Integer.parseInt(operand.substring(0, operand.indexOf("_")));
    		numerator = 0;
    		denom = 1;
    	}else{
    		numerator = Integer.parseInt(operand.substring(operand.indexOf("_")+1, operand.indexOf("/")));
    		denom = Integer.parseInt(operand.substring(operand.indexOf("/")+1));
    		wholeNum = Integer.parseInt(operand.substring(0,operand.indexOf("_")));
    	}
        int[] fracArrs = {wholeNum, numerator, denom};
        return fracArrs;
    }
    
    public static int[] toImproperFrac (int whole, int numerator, int denominator){
    	int denomAndWhole = denominator*whole;
		numerator = denomAndWhole + numerator;
		int[] improperFracArr = {numerator, denominator};
		return improperFracArr;
    }
    
	public static String simplifyFrac (int[] fracArrs){
		String equation; 
		int wholeNum = fracArrs[0];
    	int numer = fracArrs[1];
    	int denom = fracArrs[2];
    	int gcf = gcf(numer, denom);
    	numer = numer / gcf;
    	denom = denom / gcf;
    	if ((denom == 1) || (numer == 0)){
    		equation = wholeNum + "";
    	}else{
    		equation = wholeNum + "_" + numer + "/" + denom;
    	}
    	System.out.println(equation);
    	return equation;
    }
    
    public static int gcf(int num1, int num2){
		while (num1 != 0 && num2 != 0){
			int gcf = num2;
			num2 = num1 % num2;
			num1 = gcf;
		}
		int gcf = num1 + num2;
		return gcf;
	}
    // CAUSES PROBS FOR WHOLE NUM
    public static int[] toMixedNum(int[] fracArrs){
    	int denom = fracArrs[1];
    	int numer = fracArrs[0];
		int wholeNum = numer/denom;
		numer = fracArrs[0] % denom;
		int[] mixedNumArr = {wholeNum, numer, denom};
		return mixedNumArr;
	}
    
    public static int[] multiplyFrac (int[] fracArr, int[] fracArr2){
    	int numerator = fracArr[0] * fracArr2[0];
    	int denom = fracArr[1] * fracArr2[1];
    	int[] multArr = {numerator, denom};
    	return multArr;
    }
    
    public static int[] addFrac (int[] fracArr, int[] fracArr2){
    	int numerator = fracArr[0] + fracArr2[0];
    	int denom = fracArr[1];
    	int[] addArr = {numerator, denom};
    	return addArr;
    }
    
    public static int[] subtractFrac(int[] fracArr, int[] fracArr2){
    	int numerator = fracArr[0] - fracArr2[0];
    	int denom = fracArr[1];
    	int[] subtractArr = {numerator, denom};
    	return subtractArr;
    }
    
    public static int[] divideFrac (int[] fracArr, int[] fracArr2){
    	int numerator = fracArr[0] * fracArr2[1];
    	int denom = fracArr[1] * fracArr2[0];
    	int[] divArr = {numerator, denom};
    	return divArr;
    }
    
    public static int[] commonDenom (int [] fracArr, int denomOfOtherFrac){
    	int newNumer;
    	int newDenom;
    	if (denomOfOtherFrac == fracArr[1]){
    		newNumer = fracArr[0];
    		newDenom = denomOfOtherFrac;
    	} else {
    		newNumer = fracArr[0] * denomOfOtherFrac; 
    		newDenom = fracArr[1] * denomOfOtherFrac;
    	}
    	System.out.println(newNumer + " " + newDenom);
    	int[] commonDen = {newNumer, newDenom};
		return commonDen;
    }
}
